generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// User model - integrates with Clerk
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(BUYER)
  
  // User profile data
  bio       String?
  phone     String?
  
  // Relations
  products  Product[]
  orders    Order[]
  liveSessions LiveSession[]
  reviews   Review[]
  wishlist  Wishlist[]
  cart      Cart?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

// Product model - Fix field names to match frontend
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   // ✅ Keep as title (frontend expects this)
  name        String?  // ✅ Add name field for backward compatibility
  description String
  price       Float
  inventory   Int      @default(0)
  category    String
  
  // Product Details
  brand       String?
  
  // Flexible attributes
  attributes  Json?
  
  // Media
  images      String[]
  model3D     String?
  
  // Relations - Fix seller relation
  sellerId    String   @db.ObjectId // ✅ Change back to ObjectId
  seller      User     @relation(fields: [sellerId], references: [id], onDelete: Cascade) // ✅ Reference User.id
  
  orderItems  OrderItem[]
  reviews     Review[]
  wishlistItems Wishlist[]
  cartItems   CartItem[]
  
  // Product Status & Availability
  status      ProductStatus @default(ACTIVE)
  inStock     Boolean       @default(true)
  featured    Boolean       @default(false)
  
  // Ratings & Reviews
  rating      Float         @default(0)
  reviewCount Int           @default(0)
  
  // SEO & Search
  slug        String?       @unique
  tags        String[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("products")
}

// Live Shopping Sessions
model LiveSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  
  liveKitRoom String   @unique
  
  // Relations - Fix seller relation
  sellerId    String   @db.ObjectId // ✅ Change back to ObjectId
  seller      User     @relation(fields: [sellerId], references: [id], onDelete: Cascade) // ✅ Reference User.id
  
  productIds  String[] @db.ObjectId
  
  status      LiveStatus @default(SCHEDULED)
  scheduledAt DateTime?
  startedAt   DateTime?
  endedAt     DateTime?
  
  maxViewers  Int      @default(0)
  totalViews  Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("live_sessions")
}

// Orders
model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  orderNumber   String?     @unique
  
  // Relations - Fix buyer relation
  buyerId       String      @db.ObjectId // ✅ Change to ObjectId
  buyer         User        @relation(fields: [buyerId], references: [id]) // ✅ Reference User.id
  
  items         OrderItem[]
  
  // Order details - Add missing fields
  subtotal      Float       @default(0) // ✅ Remove optional, add default
  tax           Float       @default(0)
  shipping      Float       @default(0)
  discount      Float       @default(0)
  total         Float
  
  // Payment
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?
  paidAt        DateTime?
  
  // Shipping - Make required fields
  shippingAddress Json
  billingAddress  Json?
  status          OrderStatus @default(PENDING)
  
  // Order Notes
  notes         String?
  giftMessage   String?
  adminNotes    String?     // ✅ Add for seller notes
  
  // Tracking
  trackingNumber String?

  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("orders")
}

// Order Items (join table with additional data)
model OrderItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  
  // Relations
  orderId     String  @db.ObjectId
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId   String  @db.ObjectId
  product     Product @relation(fields: [productId], references: [id])
  
  // Item details at time of purchase
  quantity    Int
  price       Float   // Price at time of purchase
  productData Json?   // Snapshot of product data
  
  // Product variants selected
  selectedVariants Json? // Selected color, size, etc.
  
  @@map("order_items")
}

// Product Reviews
model Review {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  
  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  userId    String @db.ObjectId // ✅ Change back to ObjectId
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ Reference User.id
  
  rating    Int
  comment   String
  images    String[]
  
  verified  Boolean @default(false)
  helpful   Int    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reviews")
}

// Promo Codes
model PromoCode {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique
  description String?
  
  // Discount details
  discountType    DiscountType // PERCENTAGE, FIXED_AMOUNT
  discountValue   Float        // Percentage (0-100) or fixed amount
  
  // Usage limits
  maxUses         Int?         // Max total uses
  usedCount       Int          @default(0)
  maxUsesPerUser  Int?         // Max uses per user
  
  // Validity
  validFrom   DateTime
  validUntil  DateTime
  
  // Conditions
  minOrderAmount  Float?       // Minimum order amount
  applicableCategories String[] // Empty means all categories
  
  // Status
  isActive    Boolean   @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("promo_codes")
}

// Wishlist
model Wishlist {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  
  userId    String @db.ObjectId // ✅ Change back to ObjectId
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ Reference User.id
  
  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
  @@map("wishlist")
}

// Categories for better organization
model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  slug        String @unique
  description String?
  image       String?
  
  // Hierarchy support
  parentId    String? @db.ObjectId
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  
  // Status
  isActive    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("categories")
}



// Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum LiveStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  PROCESSING
  CANCELLED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Cart model - User's shopping cart
model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  items     CartItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("carts")
}

// Cart Item model - Individual items in cart
model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  quantity  Int      @default(1)
  price     Float    // Store price at time of adding to cart
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([cartId, productId]) // Prevent duplicate products in same cart
  @@map("cart_items")
}