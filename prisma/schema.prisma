generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model - integrates with Clerk
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(BUYER)
  
  // User profile data
  bio       String?
  phone     String?
  
  // Relations
  products  Product[]
  orders    Order[]
  liveSessions LiveSession[]
  reviews   Review[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

// Product model - flexible for different product types
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  inventory   Int      @default(0)
  category    String
  
  // Flexible attributes (different for each product type)
  attributes  Json?    // sizes, colors, specs, etc.
  
  // Media
  images      String[]
  model3D     String?  // URL to 3D model
  
  // Relations
  sellerId    String   @db.ObjectId
  seller      User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  orderItems  OrderItem[]
  reviews     Review[]
  
  // Status
  status      ProductStatus @default(ACTIVE)
  featured    Boolean       @default(false)
  
  // SEO
  slug        String?       @unique
  tags        String[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("products")
}

// Live Shopping Sessions
model LiveSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  
  // LiveKit integration
  liveKitRoom String   @unique
  
  // Relations
  sellerId    String   @db.ObjectId
  seller      User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  // Featured products in this session
  productIds  String[] @db.ObjectId
  
  // Session data
  status      LiveStatus @default(SCHEDULED)
  scheduledAt DateTime?
  startedAt   DateTime?
  endedAt     DateTime?
  
  // Analytics
  maxViewers  Int      @default(0)
  totalViews  Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("live_sessions")
}

// Orders
model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String      @unique
  
  // Relations
  buyerId       String      @db.ObjectId
  buyer         User        @relation(fields: [buyerId], references: [id])
  
  items         OrderItem[]
  
  // Order details
  subtotal      Float
  tax           Float       @default(0)
  shipping      Float       @default(0)
  total         Float
  
  // Payment
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?     // Razorpay payment ID
  
  // Shipping
  shippingAddress Json      // Flexible address structure
  status          OrderStatus @default(PENDING)
  
  // Tracking
  trackingNumber String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("orders")
}

// Order Items (join table with additional data)
model OrderItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  
  // Relations
  orderId     String  @db.ObjectId
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId   String  @db.ObjectId
  product     Product @relation(fields: [productId], references: [id])
  
  // Item details at time of purchase
  quantity    Int
  price       Float   // Price at time of purchase
  productData Json?   // Snapshot of product data
  
  @@map("order_items")
}

// Product Reviews
model Review {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Relations
  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Review content
  rating    Int    // 1-5 stars
  title     String?
  content   String
  images    String[] // Review images
  
  // Helpfulness
  helpful   Int    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([productId, userId]) // One review per user per product
  @@map("reviews")
}

// Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum LiveStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}